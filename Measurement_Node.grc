options:
  parameters:
    author: Frank von Schoettler
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: Measurement_Campaign_Mesh_SEW
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: '1'
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Poisson_Transceiver
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [168, 280.0]
    rotation: 0
    state: enabled

blocks:
- name: Lambda
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '1'
    step: '1'
    stop: '100'
    value: '2'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [456, 264.0]
    rotation: 0
    state: true
- name: N_Zc
  id: variable
  parameters:
    comment: ''
    value: '61 '
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [168, 704.0]
    rotation: 0
    state: true
- name: Node_ID
  id: variable
  parameters:
    comment: ''
    value: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [168, 416.0]
    rotation: 0
    state: enabled
- name: Resampled_factor
  id: variable
  parameters:
    comment: ''
    value: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [168, 560.0]
    rotation: 0
    state: true
- name: Tau
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.001'
    step: '0.01'
    stop: '2'
    value: '0.005'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 264.0]
    rotation: 0
    state: enabled
- name: center_freq_mhz
  id: variable
  parameters:
    comment: ''
    value: '3750'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [168, 488.0]
    rotation: 0
    state: enabled
- name: rx_gain
  id: variable
  parameters:
    comment: ''
    value: '40'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [704, 264.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 1.9e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [168, 632.0]
    rotation: 0
    state: enabled
- name: tx_gain
  id: variable
  parameters:
    comment: ''
    value: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [784, 264.0]
    rotation: 0
    state: enabled
- name: vector_size
  id: variable
  parameters:
    comment: ''
    value: '2048'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [168, 776.0]
    rotation: 0
    state: true
- name: zc_seq0_resampled_2times
  id: variable
  parameters:
    comment: ''
    value: (1.00000+0.00000j, 0.99925-0.16678j, 0.99470-0.10282j, 0.98144-0.06326j,
      0.95264-0.30411j, 0.90009-0.56507j, 0.81503-0.57942j, 0.68881-0.59433j, 0.51479-0.85731j,
      0.29159-1.08881j, 0.02575-0.99967j, -0.26675-0.82934j, -0.55824-0.82968j, -0.80799-0.72661j,
      -0.96703-0.25467j, -0.98931+0.28078j, -0.84378+0.53670j, -0.52669+0.70761j,
      -0.07718+0.99702j, 0.41341+1.05804j, 0.81503+0.57942j, 0.99638-0.08719j, 0.87029-0.49255j,
      0.43754-0.74336j, -0.17928-0.98380j, -0.74515-0.83268j, -0.99867-0.05148j, -0.78874+0.78042j,
      -0.17928+0.98380j, 0.54328+0.65869j, 0.97886+0.20455j, 0.82787-0.38133j, 0.12840-0.99172j,
      -0.67682-0.94111j, -0.99867+0.05148j, -0.55969+1.03381j, 0.32854+0.94449j, 0.95160+0.04060j,
      0.75113-0.66015j, -0.15055-0.74164j, -0.93572-0.35275j, -0.78117+0.38473j, 0.22969+0.97326j,
      1.00565+0.50838j, 0.60021-0.79984j, -0.54466-1.18591j, -0.98809+0.15389j, -0.13415+1.34066j,
      0.87029+0.49255j, 0.64220-1.09283j, -0.46998-0.88268j, -0.84954+0.69997j, 0.02575+0.99967j,
      0.80809-0.35357j, 0.32854-0.94449j, -0.62432+0.13048j, -0.55824+0.82968j, 0.38309-0.02635j,
      0.67927-0.73389j, -0.12804-0.00000j, -0.71615+0.69794j, -0.12804-0.00000j, 0.67927-0.73389j,
      0.38309-0.02635j, -0.55824+0.82968j, -0.62432+0.13048j, 0.32854-0.94449j, 0.80809-0.35357j,
      0.02575+0.99967j, -0.84954+0.69997j, -0.46998-0.88268j, 0.64220-1.09283j, 0.87029+0.49255j,
      -0.13415+1.34066j, -0.98809+0.15389j, -0.54466-1.18591j, 0.60021-0.79984j, 1.00565+0.50838j,
      0.22969+0.97326j, -0.78117+0.38473j, -0.93572-0.35275j, -0.15055-0.74164j, 0.75113-0.66015j,
      0.95160+0.04060j, 0.32854+0.94449j, -0.55969+1.03381j, -0.99867+0.05148j, -0.67682-0.94111j,
      0.12840-0.99172j, 0.82787-0.38133j, 0.97886+0.20455j, 0.54328+0.65869j, -0.17928+0.98380j,
      -0.78874+0.78042j, -0.99867-0.05148j, -0.74515-0.83268j, -0.17928-0.98380j,
      0.43754-0.74336j, 0.87029-0.49255j, 0.99638-0.08719j, 0.81503+0.57942j, 0.41341+1.05804j,
      -0.07718+0.99702j, -0.52669+0.70761j, -0.84378+0.53670j, -0.98931+0.28078j,
      -0.96703-0.25467j, -0.80799-0.72661j, -0.55824-0.82968j, -0.26675-0.82934j,
      0.02575-0.99967j, 0.29159-1.08881j, 0.51479-0.85731j, 0.68881-0.59433j, 0.81503-0.57942j,
      0.90009-0.56507j, 0.95264-0.30411j, 0.98144-0.06326j, 0.99470-0.10282j, 0.99925-0.16678j,
      1.00000-0.00000j, 0.99991+0.14087j)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 264.0]
    rotation: 0
    state: true
- name: blocks_char_to_float_0
  id: blocks_char_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [944, 360.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_0_1_0
  id: blocks_complex_to_mag
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [760, 416.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_0_1_0_1
  id: blocks_complex_to_mag
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 632.0]
    rotation: 0
    state: enabled
- name: blocks_delay_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: 2*N_Zc
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    showports: 'False'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792, 568.0]
    rotation: 0
    state: enabled
- name: blocks_nlog10_ff_0_1_1_0
  id: blocks_nlog10_ff
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    k: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    n: '20'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [784, 624.0]
    rotation: 0
    state: enabled
- name: blocks_peak_detector_xb_0_1_0_0
  id: blocks_peak_detector_xb
  parameters:
    affinity: ''
    alias: ''
    alpha: '0.001'
    comment: ''
    look_ahead: N_Zc*Resampled_factor - 11
    maxoutbuf: '0'
    minoutbuf: '0'
    threshold_factor_fall: '10'
    threshold_factor_rise: '10'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [888, 448.0]
    rotation: 0
    state: enabled
- name: blocks_stream_to_vector_0_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: vector_size
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1128, 520.0]
    rotation: 0
    state: enabled
- name: blocks_stream_to_vector_0_0_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: vector_size
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1040, 568.0]
    rotation: 0
    state: enabled
- name: epy_block_18_0
  id: epy_block
  parameters:
    N: N_Zc
    _source_code: "\nimport numpy as np\nfrom gnuradio import gr\nimport time\nimport\
      \ pmt\n\nclass blk(gr.sync_block):  # other base classes are basic_block, decim_block,\
      \ interp_block\n    \"\"\"Embedded Python Block example - a simple multiply\
      \ const\"\"\"\n\n    def __init__(self,  inter_arrival_time_mean=100.0, tau=0.01,\
      \ u=1, N=7, q=0):  # only default arguments here\n        \"\"\"arguments to\
      \ this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='PacketPoissonGeneratorNoInput',   # will\
      \ show up in GRC\n            in_sig = None,\n            out_sig=[np.complex64]\n\
      \        )\n        self.u = u  # Root index of the ZC sequence\n        self.N\
      \ = N  # Length of the ZC sequence\n        self.q = q  # Cyclic shift index\
      \        \n        self.inter_arrival_time_mean = inter_arrival_time_mean\n\
      \        self.time_to_next_packet = self.calculate_time_to_next_packet()   \
      \     \n        self.last_packet_time = time.time_ns()\n        self.tau = tau\n\
      \        self.packet_end_time = self.last_packet_time + tau * 1e9\n        self.counter=0\n\
      \        self.transmitting = False  # Current state of transmission\n      \
      \  self.ZC_sequence = self.generate_zc_sequence(self.u, self.N, self.q)\n  \
      \  def generate_zc_sequence(self, u, N, q):\n        \"\"\"\n        Generate\
      \ a Zadoff-Chu sequence.\n        \n        Parameters:\n        u (int): Root\
      \ index of the ZC sequence.\n        N (int): Length of the ZC sequence.\n \
      \       q (int): Cyclic shift index.\n        \n        Returns:\n        np.array:\
      \ Generated ZC sequence.\n        \"\"\"\n        n = np.arange(N)\n       \
      \ zc_seq_origin = np.exp(-1j  * np.pi * u * n * (n + 1) / (N)) \n        zc_seq_node\
      \ = np.exp(-1j  * np.pi * u * n * (n + 1 +2*q) / (N))\n        #signal = np.arange(256)\n\
      \        zc_seq = np.concatenate([zc_seq_origin,zc_seq_node], axis = 0)\n\n\
      \        #zc_seq_conj = np.conj(zc_seq)\n        #zc_zeros_padding = np.zeros(73)\n\
      \        #zc_real_block = np.exp(-1j * 2 * np.pi * u * n * (n + 1 + 2*q) / (2\
      \ * N))\n        #zc_seq = np.roll(zc_seq, q)\n        #zc_seq = np.concatenate([zc_seq,zc_seq_conj])\n\
      \        #zc_seq = zc_seq_conj\n        \n #       zc_seq = np.concatenate([zc_seq,zc_seq_conj,\
      \ zc_zeros_padding])\n        return zc_seq\n    def calculate_time_to_next_packet(self):\n\
      \        randNumber = np.random.random()\n        if randNumber >= 0.99:\n \
      \           randNumber = 0.99\n        return -1e9 * np.log(1 - randNumber)\
      \ / self.inter_arrival_time_mean # Time in ns\n\n    def work(self, input_items,\
      \ output_items):\n        timeNow = time.time_ns()\n        \n        noutput_items\
      \ = len(output_items[0])  # Number of output items to produce\n        #print(noutput_items)\n\
      \        output_items[0][:] = 0\n        if self.transmitting:\n           \
      \ #print(f'counter: {self.counter}')\n            if timeNow < self.packet_end_time:\n\
      \                for i in range(noutput_items):    \n                    output_items[0][i]\
      \ = self.ZC_sequence[self.counter]#[self.counter]\n                    self.counter\
      \ +=1\n                    if self.counter == len(self.ZC_sequence):\n     \
      \                   self.counter = 0\n                \n            else:\n\
      \                if self.counter != 0:\n                    for i in range(noutput_items):\
      \    \n                        output_items[0][i] = self.ZC_sequence[self.counter]#[self.counter]\n\
      \                        self.counter +=1\n                        if self.counter\
      \ == len(self.ZC_sequence):\n                            self.counter = 0\n\
      \                            break\n                else: \n               \
      \     self.transmitting = False\n                    self.time_to_next_packet\
      \ = self.calculate_time_to_next_packet()\n                    self.last_packet_time\
      \ = timeNow\n                #self.counter = 0\n                \n        else:\n\
      \            if timeNow - self.last_packet_time >= self.time_to_next_packet:\n\
      \                self.transmitting = True\n                self.packet_end_time\
      \ = timeNow + self.tau * 1e9\n                #output_items[0][i] = self.ZC_sequence#[self.counter]\n\
      \                self.counter =0\n        \n        return len(output_items[0])\n\
      \n\n\n"
    affinity: ''
    alias: ''
    comment: ''
    inter_arrival_time_mean: Lambda
    maxoutbuf: '0'
    minoutbuf: '0'
    q: Node_ID
    tau: Tau
    u: '1'
  states:
    _io_cache: ('PacketPoissonGeneratorNoInput', 'blk', [('inter_arrival_time_mean',
      '100.0'), ('tau', '0.01'), ('u', '1'), ('N', '7'), ('q', '0')], [], [('0', 'complex',
      1)], 'Embedded Python Block example - a simple multiply const', ['N', 'inter_arrival_time_mean',
      'q', 'tau', 'u'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 728.0]
    rotation: 0
    state: enabled
- name: epy_block_1_1
  id: epy_block
  parameters:
    Node: Node_ID
    Nzc: N_Zc
    RF: Resampled_factor
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\nimport\
      \ csv\nfrom datetime import datetime\nfrom scipy.signal import find_peaks\n\n\
      class blk(gr.sync_block):  \n    def __init__(self, vec_size=2048, Nzc=61, RF=4,\
      \ Node=1, filename=\"/home/student/Downloads/metadata.csv\"):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='NodeIdentifier',  \n            in_sig=[(np.uint8,\
      \ vec_size), (np.complex64, vec_size)],\n            out_sig=None\n        )\n\
      \        self.vec_size = vec_size  \n        self.Nzc = Nzc\n        self.RF\
      \ = RF\n        self.Sender_ID = Node\n        self.packet_started = [False\
      \ for _ in range(7)]\n        self.filename = filename\n\n        # Initialize\
      \ CSV file\n        try:\n            with open(self.filename, 'a', newline='')\
      \ as f:\n                writer = csv.writer(f)\n                if f.tell()\
      \ == 0:\n                    writer.writerow([\"Sender_ID\", \"Receiver_ID\"\
      , \"Timestamp\", \"Received Power (dBm)\"])\n        except IOError:\n     \
      \       print(f\"Error: Could not write to file {self.filename}\")\n\n    def\
      \ calculate_rsrp(self, signal,non_zero_indices):\n        signal = signal.flatten()\n\
      \        len_sig = len(non_zero_indices)\n        \n        magnitude_squared\
      \ = np.abs(signal[non_zero_indices[0]:non_zero_indices[0]+len_sig*self.RF*self.Nzc])**2\n\
      \        \n        rsrp_linear = np.mean(magnitude_squared) #Results may be\
      \ smaller that actual RSRP, since some part of signal may not have any zc sequence\
      \ but only noise\n        rsrp_dbm = 10 * np.log10(rsrp_linear) if rsrp_linear\
      \ > 0 else -np.inf\n        return rsrp_dbm\n\n    def get_current_timestamp(self):\n\
      \        return datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]\n\n   \
      \ def start_packet(self, Receiver_ID, signal,non_zero_indices):\n        Receiver_ID\
      \ += 1  \n        start_time = self.get_current_timestamp()\n        rsrp_dbm\
      \ = self.calculate_rsrp(signal,non_zero_indices)\n        try:\n           \
      \ with open(self.filename, 'a', newline='') as f:\n                writer =\
      \ csv.writer(f)\n                writer.writerow([self.Sender_ID, Receiver_ID,\
      \ start_time, f\"{rsrp_dbm:.6f}\"])\n        except IOError:\n            print(f\"\
      Error: Could not write to file {self.filename}\")\n\n\n    def work(self, input_items,\
      \ output_items):\n        in0 = input_items[0]  \n        in1 = input_items[1]\
      \  \n\n        non_zero_indices = np.nonzero(in0)[1]\n        packet_detector\
      \ = [False for _ in range(7)]\n\n        if len(non_zero_indices) != 0:\n  \
      \          for i in range(len(non_zero_indices) - 1):\n                if non_zero_indices[i\
      \ + 1] > non_zero_indices[i]:\n                    node_index = ((np.abs(non_zero_indices[i\
      \ + 1] - non_zero_indices[i] - self.Nzc * self.RF) - self.RF) // self.RF) %\
      \ 7\n                    packet_detector[node_index] = True\n\n            if\
      \ sum(packet_detector) == 1:\n                for i in range(len(packet_detector)):\n\
      \                    if packet_detector[i] and not self.packet_started[i]:\n\
      \                    \n                        self.packet_started[i] = True\n\
      \                        self.start_packet(i, in1,non_zero_indices)\n      \
      \      else:\n                for i in range(len(self.packet_started)):\n  \
      \                  if self.packet_started[i]:\n                        self.packet_started[i]\
      \ = False\n                return 1  \n\n        for i in range(len(self.packet_started)):\n\
      \            if self.packet_started[i] and len(non_zero_indices) == 0:\n   \
      \             self.packet_started[i] = False\n\n        return len(in1)\n\n"
    affinity: ''
    alias: ''
    comment: ''
    filename: f'./Results/Measurements_Node_{Node_ID}.csv'
    maxoutbuf: '0'
    minoutbuf: '0'
    vec_size: vector_size
  states:
    _io_cache: ('NodeIdentifier', 'blk', [('vec_size', '2048'), ('Nzc', '61'), ('RF',
      '4'), ('Node', '1'), ('filename', "'/home/student/Downloads/metadata.csv'")],
      [('0', 'byte', 2048), ('1', 'complex', 2048)], [], '', ['Nzc', 'RF', 'filename',
      'vec_size'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1280, 520.0]
    rotation: 0
    state: enabled
- name: fft_filter_xxx_0_0
  id: fft_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    samp_delay: '0'
    taps: numpy.conj(zc_seq0_resampled_2times)
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 400.0]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import numpy
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [344, 264.0]
    rotation: 0
    state: true
- name: import_1
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import pmt
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2224, 1544.0]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_0_2_1_1_2_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'False'
    grid: 'False'
    gui_hint: ''
    label1: Nodes
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '0'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"ReceivedSIgnal"'
    nconnections: '1'
    size: 25000*50
    srate: samp_rate*Resampled_factor
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '2'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: '"Magnitude"'
    ymax: '0'
    ymin: '-100'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [888, 648.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_2_1_1_2_0_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'False'
    grid: 'False'
    gui_hint: ''
    label1: Nodes
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '0'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Peak"'
    nconnections: '1'
    size: 25000*50
    srate: samp_rate*Resampled_factor
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '2'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: '"Magnitude"'
    ymax: '1'
    ymin: '0'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1072, 408.0]
    rotation: 0
    state: enabled
- name: uhd_usrp_sink_0
  id: uhd_usrp_sink
  parameters:
    affinity: ''
    alias: ''
    ant0: TX/RX
    ant1: TX/RX
    ant10: TX/RX
    ant11: TX/RX
    ant12: TX/RX
    ant13: TX/RX
    ant14: TX/RX
    ant15: TX/RX
    ant16: TX/RX
    ant17: TX/RX
    ant18: TX/RX
    ant19: TX/RX
    ant2: TX/RX
    ant20: TX/RX
    ant21: TX/RX
    ant22: TX/RX
    ant23: TX/RX
    ant24: TX/RX
    ant25: TX/RX
    ant26: TX/RX
    ant27: TX/RX
    ant28: TX/RX
    ant29: TX/RX
    ant3: TX/RX
    ant30: TX/RX
    ant31: TX/RX
    ant4: TX/RX
    ant5: TX/RX
    ant6: TX/RX
    ant7: TX/RX
    ant8: TX/RX
    ant9: TX/RX
    bw0: samp_rate
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: center_freq_mhz*1e6
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dev_addr: '""'
    dev_args: '""'
    gain0: tx_gain
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: normalized
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    len_tag_name: '""'
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: pc_clock
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 692.0]
    rotation: 0
    state: enabled
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: '"TX/RX"'
    ant1: '"RX2"'
    ant10: '"RX2"'
    ant11: '"RX2"'
    ant12: '"RX2"'
    ant13: '"RX2"'
    ant14: '"RX2"'
    ant15: '"RX2"'
    ant16: '"RX2"'
    ant17: '"RX2"'
    ant18: '"RX2"'
    ant19: '"RX2"'
    ant2: '"RX2"'
    ant20: '"RX2"'
    ant21: '"RX2"'
    ant22: '"RX2"'
    ant23: '"RX2"'
    ant24: '"RX2"'
    ant25: '"RX2"'
    ant26: '"RX2"'
    ant27: '"RX2"'
    ant28: '"RX2"'
    ant29: '"RX2"'
    ant3: '"RX2"'
    ant30: '"RX2"'
    ant31: '"RX2"'
    ant4: '"RX2"'
    ant5: '"RX2"'
    ant6: '"RX2"'
    ant7: '"RX2"'
    ant8: '"RX2"'
    ant9: '"RX2"'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: center_freq_mhz*1e6
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs0: 0+0j
    dc_offs1: 0+0j
    dc_offs10: 0+0j
    dc_offs11: 0+0j
    dc_offs12: 0+0j
    dc_offs13: 0+0j
    dc_offs14: 0+0j
    dc_offs15: 0+0j
    dc_offs16: 0+0j
    dc_offs17: 0+0j
    dc_offs18: 0+0j
    dc_offs19: 0+0j
    dc_offs2: 0+0j
    dc_offs20: 0+0j
    dc_offs21: 0+0j
    dc_offs22: 0+0j
    dc_offs23: 0+0j
    dc_offs24: 0+0j
    dc_offs25: 0+0j
    dc_offs26: 0+0j
    dc_offs27: 0+0j
    dc_offs28: 0+0j
    dc_offs29: 0+0j
    dc_offs3: 0+0j
    dc_offs30: 0+0j
    dc_offs31: 0+0j
    dc_offs4: 0+0j
    dc_offs5: 0+0j
    dc_offs6: 0+0j
    dc_offs7: 0+0j
    dc_offs8: 0+0j
    dc_offs9: 0+0j
    dc_offs_enb0: default
    dc_offs_enb1: default
    dc_offs_enb10: default
    dc_offs_enb11: default
    dc_offs_enb12: default
    dc_offs_enb13: default
    dc_offs_enb14: default
    dc_offs_enb15: default
    dc_offs_enb16: default
    dc_offs_enb17: default
    dc_offs_enb18: default
    dc_offs_enb19: default
    dc_offs_enb2: default
    dc_offs_enb20: default
    dc_offs_enb21: default
    dc_offs_enb22: default
    dc_offs_enb23: default
    dc_offs_enb24: default
    dc_offs_enb25: default
    dc_offs_enb26: default
    dc_offs_enb27: default
    dc_offs_enb28: default
    dc_offs_enb29: default
    dc_offs_enb3: default
    dc_offs_enb30: default
    dc_offs_enb31: default
    dc_offs_enb4: default
    dc_offs_enb5: default
    dc_offs_enb6: default
    dc_offs_enb7: default
    dc_offs_enb8: default
    dc_offs_enb9: default
    dev_addr: '""'
    dev_args: ''
    gain0: rx_gain
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    iq_imbal0: 0+0j
    iq_imbal1: 0+0j
    iq_imbal10: 0+0j
    iq_imbal11: 0+0j
    iq_imbal12: 0+0j
    iq_imbal13: 0+0j
    iq_imbal14: 0+0j
    iq_imbal15: 0+0j
    iq_imbal16: 0+0j
    iq_imbal17: 0+0j
    iq_imbal18: 0+0j
    iq_imbal19: 0+0j
    iq_imbal2: 0+0j
    iq_imbal20: 0+0j
    iq_imbal21: 0+0j
    iq_imbal22: 0+0j
    iq_imbal23: 0+0j
    iq_imbal24: 0+0j
    iq_imbal25: 0+0j
    iq_imbal26: 0+0j
    iq_imbal27: 0+0j
    iq_imbal28: 0+0j
    iq_imbal29: 0+0j
    iq_imbal3: 0+0j
    iq_imbal30: 0+0j
    iq_imbal31: 0+0j
    iq_imbal4: 0+0j
    iq_imbal5: 0+0j
    iq_imbal6: 0+0j
    iq_imbal7: 0+0j
    iq_imbal8: 0+0j
    iq_imbal9: 0+0j
    iq_imbal_enb0: default
    iq_imbal_enb1: default
    iq_imbal_enb10: default
    iq_imbal_enb11: default
    iq_imbal_enb12: default
    iq_imbal_enb13: default
    iq_imbal_enb14: default
    iq_imbal_enb15: default
    iq_imbal_enb16: default
    iq_imbal_enb17: default
    iq_imbal_enb18: default
    iq_imbal_enb19: default
    iq_imbal_enb2: default
    iq_imbal_enb20: default
    iq_imbal_enb21: default
    iq_imbal_enb22: default
    iq_imbal_enb23: default
    iq_imbal_enb24: default
    iq_imbal_enb25: default
    iq_imbal_enb26: default
    iq_imbal_enb27: default
    iq_imbal_enb28: default
    iq_imbal_enb29: default
    iq_imbal_enb3: default
    iq_imbal_enb30: default
    iq_imbal_enb31: default
    iq_imbal_enb4: default
    iq_imbal_enb5: default
    iq_imbal_enb6: default
    iq_imbal_enb7: default
    iq_imbal_enb8: default
    iq_imbal_enb9: default
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    rx_agc0: Disabled
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate*Resampled_factor
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: pc_clock
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [352, 496.0]
    rotation: 0
    state: enabled

connections:
- [blocks_char_to_float_0, '0', qtgui_time_sink_x_0_2_1_1_2_0_0_0, '0']
- [blocks_complex_to_mag_0_1_0, '0', blocks_peak_detector_xb_0_1_0_0, '0']
- [blocks_complex_to_mag_0_1_0_1, '0', blocks_nlog10_ff_0_1_1_0, '0']
- [blocks_delay_0, '0', blocks_stream_to_vector_0_0_0, '0']
- [blocks_nlog10_ff_0_1_1_0, '0', qtgui_time_sink_x_0_2_1_1_2_0_0, '0']
- [blocks_peak_detector_xb_0_1_0_0, '0', blocks_char_to_float_0, '0']
- [blocks_peak_detector_xb_0_1_0_0, '0', blocks_stream_to_vector_0_0, '0']
- [blocks_stream_to_vector_0_0, '0', epy_block_1_1, '0']
- [blocks_stream_to_vector_0_0_0, '0', epy_block_1_1, '1']
- [epy_block_18_0, '0', uhd_usrp_sink_0, '0']
- [fft_filter_xxx_0_0, '0', blocks_complex_to_mag_0_1_0, '0']
- [uhd_usrp_source_0, '0', blocks_complex_to_mag_0_1_0_1, '0']
- [uhd_usrp_source_0, '0', blocks_delay_0, '0']
- [uhd_usrp_source_0, '0', fft_filter_xxx_0_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.9.2
